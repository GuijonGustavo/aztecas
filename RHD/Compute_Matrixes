#!/bin/bash
maxima<<EOF

/*Parameters*/

	batch("EOS");
	batch("RHD-Charges");
	batch("RHD-FluxesF");
	batch("RHD-FluxesG");
	batch("RHD-FluxesH");
  
	/*Computes the jacobian matrix of q(U) and its inverse*/
	q: jacobian([q1,q2,q3,q4,q5],[n,p,u,v,w])$
   iq: invert(q)$
  
 	/*Computes the jacobian matrix of f(U)*/
   f: jacobian([f1,f2,f3,f4,f5],[n,p,u,v,w])$

 	/*Computes the jacobian matrix of g(U)*/
   g: jacobian([g1,g2,g3,g4,g5],[n,p,u,v,w])$
 	
	/*Computes the jacobian matrix of h(U)*/
   h: jacobian([h1,h2,h3,h4,h5],[n,p,u,v,w])$
   
	/*Computes the M matrix and output the file MATRIX_M*/
   M: iq . f$

	/*Computes the N matrix and output the file MATRIX_M*/
   N: iq . g$

	/*Computes the O matrix and output the file MATRIX_M*/
   O: iq . h$
	
	/*Computes the eigenvectors and eigenvalues(characteristic velocities) of M*/
	m : matrix([M[1,1],M[1,2],M[1,3]],[M[2,1],M[2,2],M[2,3]],[M[3,1],M[3,2],M[3,3]]);	
	[vals,vecs] : eigenvectors(m)$
	[m1,m2,m3]: vals[1]$
	
	/*Computes the eigenvectors and eigenvalues(characteristic velocities) of N*/
	[vals,vecs] : eigenvectors(N)$
	[n1,n2,n3]: vals[1]$
	
	/*Computes the eigenvectors and eigenvalues(characteristic velocities) of O*/
	[vals,vecs] : eigenvectors(O)$
	[o1,o2,o3]: vals[1]$

   /*Computes the matrix D = diag[m1,m2,m3] and output the file MATRIX_Dm*/
   Dm: matrix([m1,0,0],[0,m2,0],[0,0,m3])$
   stringout("MATRIX_Dm",ratsimp(Dm[1,1]),ratsimp(Dm[1,2]),
   ratsimp(Dm[1,3]),ratsimp(Dm[2,1]),ratsimp(Dm[2,2]),ratsimp(Dm[2,3]),
   ratsimp(Dm[3,1]),ratsimp(Dm[3,2]),ratsimp(Dm[3,3]))$
   
	/*Computes the matrix D = diag[n1,n2,n3] and output the file MATRIX_Dn*/
   Dn: matrix([n1,0,0],[0,n2,0],[0,0,n3])$
   stringout("MATRIX_Dn",ratsimp(Dn[1,1]),ratsimp(Dn[1,2]),
   ratsimp(Dn[1,3]),ratsimp(Dn[2,1]),ratsimp(Dn[2,2]),ratsimp(Dn[2,3]),
   ratsimp(Dn[3,1]),ratsimp(Dn[3,2]),ratsimp(Dn[3,3]))$
   
	/*Computes the matrix D = diag[o1,o2,o3] and output the file MATRIX_Do*/
   Do: matrix([o1,0,0],[0,o2,0],[0,0,o3])$
   stringout("MATRIX_Do",ratsimp(Do[1,1]),ratsimp(Do[1,2]),
   ratsimp(Do[1,3]),ratsimp(Do[2,1]),ratsimp(Do[2,2]),ratsimp(Do[2,3]),
   ratsimp(Do[3,1]),ratsimp(Do[3,2]),ratsimp(Do[3,3]))$
	
	/*Output the file VECTOR_Q*/
	Q: matrix([q1],[q2],[q3],[q4],[q5])$
	stringout("VECTOR_Q",ratsimp(Q[1,1]),ratsimp(Q[2,1]),ratsimp(Q[3,1]),
	ratsimp(Q[4,1]),ratsimp(Q[5,1]))$

	/*Output the file VECTOR_F*/
	F: matrix([f1],[f2],[f3],[f4],[f5])$
	stringout("VECTOR_F",ratsimp(F[1,1]),ratsimp(F[2,1]),ratsimp(F[3,1]),
	ratsimp(F[4,1]),ratsimp(F[5,1]))$

	/*Output the file VECTOR_G*/
	G: matrix([g1],[g2],[g3],[g4],[g5])$
	stringout("VECTOR_G",ratsimp(G[1,1]),ratsimp(G[2,1]),ratsimp(G[3,1]),
	ratsimp(G[4,1]),ratsimp(G[5,1]))$

	/*Output the file VECTOR_H*/
	H: matrix([h1],[h2],[h3],[h4],[h5])$
	stringout("VECTOR_H",ratsimp(H[1,1]),ratsimp(H[2,1]),ratsimp(H[3,1]),
	ratsimp(H[4,1]),ratsimp(H[5,1]))$

	/*Output the file VECTOR_S*/
	S: matrix([s1],[s2],[s3],[s4],[s5])$
	stringout("VECTOR_S",ratsimp(S[1,1]),ratsimp(S[2,1]),ratsimp(S[3,1]),
	ratsimp(S[4,1]),ratsimp(S[5,1]))$

	/*Output the file MATRIX_A, which is the inverse jacobian matriz of q(U)*/
   A: iq$
   stringout("MATRIX_A",ratsimp(A[1,1]),ratsimp(A[1,2]),ratsimp(A[1,3]),ratsimp(A[1,4]),ratsimp(A[1,5]),
	ratsimp(A[2,1]),ratsimp(A[2,2]),ratsimp(A[2,3]),ratsimp(A[2,4]),ratsimp(A[2,5]),
	ratsimp(A[3,1]),ratsimp(A[3,2]),ratsimp(A[3,3]),ratsimp(A[3,4]),ratsimp(A[3,5]),
	ratsimp(A[4,1]),ratsimp(A[4,2]),ratsimp(A[4,3]),ratsimp(A[4,4]),ratsimp(A[4,5]),
	ratsimp(A[5,1]),ratsimp(A[5,2]),ratsimp(A[5,3]),ratsimp(A[5,4]),ratsimp(A[5,5]));

	/*Output the file MOD_M for the dt calculation*/
	m1 : (M[1,1]^2 + M[1,2]^2 + M[1,3]^2 + M[1,4]^2 + M[1,5]^2);
	m2 : (M[2,1]^2 + M[2,2]^2 + M[2,3]^2 + M[2,4]^2 + M[2,5]^2);
	m3 : (M[3,1]^2 + M[3,2]^2 + M[3,3]^2 + M[3,4]^2 + M[3,5]^2);
	m4 : (M[4,1]^2 + M[4,2]^2 + M[4,3]^2 + M[4,4]^2 + M[4,5]^2);
	m5 : (M[5,1]^2 + M[5,2]^2 + M[5,3]^2 + M[5,4]^2 + M[5,5]^2);
	MM : matrix([m1],[m2],[m3],[m4],[m5])$
	stringout("MOD_M",ratsimp(MM[1,1]),ratsimp(MM[2,1]),ratsimp(MM[3,1]),
	ratsimp(MM[4,1]),ratsimp(MM[5,1]))$

	/*Output the file MOD_M for the dt calculation*/
	n1 : (N[1,1]^2 + N[1,2]^2 + N[1,3]^2 + N[1,4]^2 + N[1,5]^2);
	n2 : (N[2,1]^2 + N[2,2]^2 + N[2,3]^2 + N[2,4]^2 + N[2,5]^2);
	n3 : (N[3,1]^2 + N[3,2]^2 + N[3,3]^2 + N[3,4]^2 + N[3,5]^2);
	n4 : (N[4,1]^2 + N[4,2]^2 + N[4,3]^2 + N[4,4]^2 + N[4,5]^2);
	n5 : (N[5,1]^2 + N[5,2]^2 + N[5,3]^2 + N[5,4]^2 + N[5,5]^2);
	NN: matrix([n1],[n2],[n3],[n4],[n5])$
	stringout("MOD_N",ratsimp(NN[1,1]),ratsimp(NN[2,1]),ratsimp(NN[3,1]),
	ratsimp(NN[4,1]),ratsimp(NN[5,1]))$

	/*Output the file MOD_M for the dt calculation*/
	o1 : (O[1,1]^2 + O[1,2]^2 + O[1,3]^2 + O[1,4]^2 + O[1,5]^2);
	o2 : (O[2,1]^2 + O[2,2]^2 + O[2,3]^2 + O[2,4]^2 + O[2,5]^2);
	o3 : (O[3,1]^2 + O[3,2]^2 + O[3,3]^2 + O[3,4]^2 + O[3,5]^2);
	o4 : (O[4,1]^2 + O[4,2]^2 + O[4,3]^2 + O[4,4]^2 + O[4,5]^2);
	o5 : (O[5,1]^2 + O[5,2]^2 + O[5,3]^2 + O[5,4]^2 + O[5,5]^2);
	OO: matrix([o1],[o2],[o3],[o4],[o5])$
	stringout("MOD_O",ratsimp(OO[1,1]),ratsimp(OO[2,1]),ratsimp(OO[3,1]),
	ratsimp(OO[4,1]),ratsimp(OO[5,1]))$
EOF
